# -*- coding: utf-8 -*-
"""Project-Face Mask Detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ojdr84Au0hPELZ_RxqxbJL5Mz3h72sM

**Data Preprocessing**

Image -> RGB2GRAY -> 100*100 image Size
"""

import numpy as np

!unzip dataset-20210306T132007Z-001.zip

import cv2,os
data_path='/content/dataset'
categories=os.listdir(data_path)
labels=[i for i in range(len(categories))]

label_dict=dict(zip(categories,labels))
print(categories)

print(labels)
print(label_dict)

img_size=100
data=[]
target=[]
 
for category in categories:
  folder_path=os.path.join(data_path,category)
  img_names=os.listdir(folder_path)

  for img_name in img_names:
    img_path=os.path.join(folder_path,img_name)
    img=cv2.imread(img_path)

    try:
      gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)         #converting the image into gray scale
      resized=cv2.resize(gray,(img_size,img_size))      # resizing the image size into 100*100 image
      data.append(resized)
      target.append(label_dict[category])               # appending the image and the label

    except Exception as e:
      print('Exception:',e)

data=np.array(data)/255.0                                                 #converting the image into 0and 1 scale
data=np.reshape(data,(data.shape[0],img_size,img_size,1))                 #converting into 4 dimensional array
target=np.array(target)

from keras.utils import np_utils
new_target=np_utils.to_categorical(target)                 # last layer of neural network is categorical
np.save('data',data)
np.save('target',new_target)

"""**Preparing convolutional Layer**"""

data=np.load('data.npy')
target=np.load('target.npy')

from keras.models import Sequential
from keras.layers import Dense,Activation,Flatten,Dropout
from keras.layers import Conv2D,MaxPooling2D
from keras.callbacks import ModelCheckpoint

model=Sequential()

model.add(Conv2D(200,(3,3),activation='relu',input_shape=data.shape[1:]))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(200,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dropout(0.5))

model.add(Dense(50,activation='relu'))
model.add(Dense(2,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

from sklearn.model_selection import train_test_split
train_data,test_data,train_target,test_target=train_test_split(data,target,test_size=0.1)

checkpoint=ModelCheckpoint('model-{epoch:03d}.model',monitor='val_loss',verbose=0,save_best_only=True,mode='auto')
model_history=model.fit(train_data,train_target,epochs=20,callbacks=[checkpoint],validation_split=0.2)

import pandas as pd
import matplotlib.pyplot as plt
pd.DataFrame(model_history.history).plot(figsize=(8,5))
plt.grid(True)
plt.gca().set_ylim(0,1)
plt.show()

print(model.evaluate(test_data,test_target))

from keras.models import load_model

model1=load_model('model-015.model')
face_clfsr=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
source=cv2.VideoCapture(0)                # Capture the image from webcam

labels_dict={0:'Mask',1:'NO_MASK'}
color_dict={0:(0,255,0),1:(0,0,255)}      #Green color for mask and red color without mask

while(True):
  ret,img=source.read()
  gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  faces=face_clsfr.detectMultiScale(gray,1.3,5)

  for x,y,w,h in faces:
    face_img=gray[y:y+w,x:x+w]
    resized=cv2.resize(face_img(100,100))
    normalized=resized/255.0
    reshaped=np.reshape(normalized,(1,100,100,1))
    result=model1.predict(reshaped)

    label=np.argmax(result,axis=1)[0]         # It will give the maximum probability
     
    cv2.rectangle(img,(x,y),(x+w,y+h),color_dict[label],2)
    cv2.rectangle(img,(x,y-40),(x+w,y),color_dict[label],-1)
    cv2.putText(img,labels_dict[label],(x,y-10),cv2.FONT_HERSHEY_SCRIPT_SIMPLEX,0.8,(255,255,255),2)
    
    
  cv2.imshow('LIVE',img)
  key=cv2.waitKey(1)

  if(key==27):
    break

cv2.destroyAllWindows()
source.release()

